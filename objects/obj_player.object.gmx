<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_up</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Hide default cursor

{
    window_set_cursor(cr_none);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Health

{ 
    //wether or not the player is invincible
    global.invincible = false;
    
    //whether or not the player is alive
    global.alive = true;
    
    //wether or not player has control
    global.move = true;
    
    //walking sound
    global.footstep = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>212</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_end_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_main_menu_music</sound>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_rain</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// set movement

{
    global.move = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// set invincibility

{
    global.invincible = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movement

//this is a bit convoluted, but it  is to avoid an error with game maker that
//involves players walking faster when they move diagonally

//DONT TOUCH THE CODE IF YOU DONT KNOW HOW TO FIX IT
{
    //you CAN change the variable pace to change the speed at which the  
    //player moves
    var pace = 5;
    
    //im checking if 'W' is down first, and then checking if another key is down with it
    //I do the same thing for 'S'
    //'A' and 'D' dont need to check if another key is down because its already covered
    if (global.move){
        if (global.footstep){
            //audio_play_sound(snd_footstep,10,true);
        }
        if (keyboard_check(ord('W'))){
            global.footstep = true;
            if (keyboard_check(ord('A'))){
                direction = 135;
                speed = pace;
            }
            else if (keyboard_check(ord('D'))){
                direction = 45;
                speed = pace;
            }
            else {
                direction = 90;
                speed = pace;
            }
        }
        else if (keyboard_check(ord('S'))){
            global.footstep = true;
            if (keyboard_check(ord('A'))){
                direction = 225;
                speed = pace;
            }
            else if (keyboard_check(ord('D'))){
                direction = 315;
                speed = pace;
            }
            else {
                direction = 270;
                speed = pace;
            }
        }
        else if (keyboard_check(ord('A'))){
            global.footstep = true;
            direction = 180;
            speed = pace;
        }
        else if (keyboard_check(ord('D'))){
            global.footstep = true;
            direction = 0;
            speed = pace;
        }
        else {
            speed = 0;
            global.footstep = false;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if alive

{
    if (global.life &lt;= 0){
        global.alive = false;
        room_goto(rm_game_over);        
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_teddy_2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// wall collision

//this code makes it so players cannot move through walls, but also
//allows them to slide along them.

//DONT TOUCH THE CODE IF YOU DONT KNOW HOW TO FIX IT
{
    //this variable CAN be changed, it referes to the collison distance
    //THIS MUST BE &gt;= PACE OR GAME CRASHES
    var cd = 5;
    
    //im checking each of the 4 diagonal directions, then checking for collisions
    //horizontally and vertically
    //if there is a collison vertically, horozontal movement is forced, and vice versa
    if (global.move == true){
        if (obj_player.direction = 45){
            if (!place_meeting(x + cd, y, obj_teddy_2)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y - cd, obj_teddy_2)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 135){
            if (!place_meeting(x - cd, y, obj_teddy_2)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y - cd, obj_teddy_2)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 225){
            if (!place_meeting(x - cd, y, obj_teddy_2)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y + cd, obj_teddy_2)){
                obj_player.direction = 270;
            }
        }
        if (obj_player.direction = 315){
            if (!place_meeting(x + cd, y, obj_teddy_2)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y + cd, obj_teddy_2)){
                obj_player.direction = 270;
            }
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_teddy_1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// wall collision

//this code makes it so players cannot move through walls, but also
//allows them to slide along them.

//DONT TOUCH THE CODE IF YOU DONT KNOW HOW TO FIX IT
{
    //this variable CAN be changed, it referes to the collison distance
    //THIS MUST BE &gt;= PACE OR GAME CRASHES
    var cd = 5;
    
    //im checking each of the 4 diagonal directions, then checking for collisions
    //horizontally and vertically
    //if there is a collison vertically, horozontal movement is forced, and vice versa
    if (global.move == true){
        if (obj_player.direction = 45){
            if (!place_meeting(x + cd, y, obj_teddy_1)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y - cd, obj_teddy_1)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 135){
            if (!place_meeting(x - cd, y, obj_teddy_1)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y - cd, obj_teddy_1)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 225){
            if (!place_meeting(x - cd, y, obj_teddy_1)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y + cd, obj_teddy_1)){
                obj_player.direction = 270;
            }
        }
        if (obj_player.direction = 315){
            if (!place_meeting(x + cd, y, obj_teddy_1)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y + cd, obj_teddy_1)){
                obj_player.direction = 270;
            }
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_table_3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// wall collision

//this code makes it so players cannot move through walls, but also
//allows them to slide along them.

//DONT TOUCH THE CODE IF YOU DONT KNOW HOW TO FIX IT
{
    //this variable CAN be changed, it referes to the collison distance
    //THIS MUST BE &gt;= PACE OR GAME CRASHES
    var cd = 5;
    
    //im checking each of the 4 diagonal directions, then checking for collisions
    //horizontally and vertically
    //if there is a collison vertically, horozontal movement is forced, and vice versa
    if (global.move == true){
        if (obj_player.direction = 45){
            if (!place_meeting(x + cd, y, obj_table_3)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y - cd, obj_table_3)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 135){
            if (!place_meeting(x - cd, y, obj_table_3)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y - cd, obj_table_3)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 225){
            if (!place_meeting(x - cd, y, obj_table_3)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y + cd, obj_table_3)){
                obj_player.direction = 270;
            }
        }
        if (obj_player.direction = 315){
            if (!place_meeting(x + cd, y, obj_table_3)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y + cd, obj_table_3)){
                obj_player.direction = 270;
            }
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_table_2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// wall collision

//this code makes it so players cannot move through walls, but also
//allows them to slide along them.

//DONT TOUCH THE CODE IF YOU DONT KNOW HOW TO FIX IT
{
    //this variable CAN be changed, it referes to the collison distance
    //THIS MUST BE &gt;= PACE OR GAME CRASHES
    var cd = 5;
    
    //im checking each of the 4 diagonal directions, then checking for collisions
    //horizontally and vertically
    //if there is a collison vertically, horozontal movement is forced, and vice versa
    if (global.move == true){
        if (obj_player.direction = 45){
            if (!place_meeting(x + cd, y, obj_table_2)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y - cd, obj_table_2)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 135){
            if (!place_meeting(x - cd, y, obj_table_2)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y - cd, obj_table_2)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 225){
            if (!place_meeting(x - cd, y, obj_table_2)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y + cd, obj_table_2)){
                obj_player.direction = 270;
            }
        }
        if (obj_player.direction = 315){
            if (!place_meeting(x + cd, y, obj_table_2)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y + cd, obj_table_2)){
                obj_player.direction = 270;
            }
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_table_1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// wall collision

//this code makes it so players cannot move through walls, but also
//allows them to slide along them.

//DONT TOUCH THE CODE IF YOU DONT KNOW HOW TO FIX IT
{
    //this variable CAN be changed, it referes to the collison distance
    //THIS MUST BE &gt;= PACE OR GAME CRASHES
    var cd = 5;
    
    //im checking each of the 4 diagonal directions, then checking for collisions
    //horizontally and vertically
    //if there is a collison vertically, horozontal movement is forced, and vice versa
    if (global.move == true){
        if (obj_player.direction = 45){
            if (!place_meeting(x + cd, y, obj_table_1)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y - cd, obj_table_1)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 135){
            if (!place_meeting(x - cd, y, obj_table_1)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y - cd, obj_table_1)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 225){
            if (!place_meeting(x - cd, y, obj_table_1)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y + cd, obj_table_1)){
                obj_player.direction = 270;
            }
        }
        if (obj_player.direction = 315){
            if (!place_meeting(x + cd, y, obj_table_1)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y + cd, obj_table_1)){
                obj_player.direction = 270;
            }
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_small_table_blood">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// wall collision

//this code makes it so players cannot move through walls, but also
//allows them to slide along them.

//DONT TOUCH THE CODE IF YOU DONT KNOW HOW TO FIX IT
{
    //this variable CAN be changed, it referes to the collison distance
    //THIS MUST BE &gt;= PACE OR GAME CRASHES
    var cd = 5;
    
    //im checking each of the 4 diagonal directions, then checking for collisions
    //horizontally and vertically
    //if there is a collison vertically, horozontal movement is forced, and vice versa
    if (global.move == true){
        if (obj_player.direction = 45){
            if (!place_meeting(x + cd, y, obj_small_table_blood)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y - cd, obj_small_table_blood)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 135){
            if (!place_meeting(x - cd, y, obj_small_table_blood)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y - cd, obj_small_table_blood)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 225){
            if (!place_meeting(x - cd, y, obj_small_table_blood)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y + cd, obj_small_table_blood)){
                obj_player.direction = 270;
            }
        }
        if (obj_player.direction = 315){
            if (!place_meeting(x + cd, y, obj_small_table_blood)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y + cd, obj_small_table_blood)){
                obj_player.direction = 270;
            }
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_ripped_teddy_1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// wall collision

//this code makes it so players cannot move through walls, but also
//allows them to slide along them.

//DONT TOUCH THE CODE IF YOU DONT KNOW HOW TO FIX IT
{
    //this variable CAN be changed, it referes to the collison distance
    //THIS MUST BE &gt;= PACE OR GAME CRASHES
    var cd = 5;
    
    //im checking each of the 4 diagonal directions, then checking for collisions
    //horizontally and vertically
    //if there is a collison vertically, horozontal movement is forced, and vice versa
    if (global.move == true){
        if (obj_player.direction = 45){
            if (!place_meeting(x + cd, y, obj_ripped_teddy_1)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y - cd, obj_ripped_teddy_1)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 135){
            if (!place_meeting(x - cd, y, obj_ripped_teddy_1)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y - cd, obj_ripped_teddy_1)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 225){
            if (!place_meeting(x - cd, y, obj_ripped_teddy_1)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y + cd, obj_ripped_teddy_1)){
                obj_player.direction = 270;
            }
        }
        if (obj_player.direction = 315){
            if (!place_meeting(x + cd, y, obj_ripped_teddy_1)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y + cd, obj_ripped_teddy_1)){
                obj_player.direction = 270;
            }
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_counter_1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// wall collision

//this code makes it so players cannot move through walls, but also
//allows them to slide along them.

//DONT TOUCH THE CODE IF YOU DONT KNOW HOW TO FIX IT
{
    //this variable CAN be changed, it referes to the collison distance
    //THIS MUST BE &gt;= PACE OR GAME CRASHES
    var cd = 5;
    
    //im checking each of the 4 diagonal directions, then checking for collisions
    //horizontally and vertically
    //if there is a collison vertically, horozontal movement is forced, and vice versa
    if (global.move == true){
        if (obj_player.direction = 45){
            if (!place_meeting(x + cd, y, obj_counter_1)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y - cd, obj_counter_1)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 135){
            if (!place_meeting(x - cd, y, obj_counter_1)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y - cd, obj_counter_1)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 225){
            if (!place_meeting(x - cd, y, obj_counter_1)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y + cd, obj_counter_1)){
                obj_player.direction = 270;
            }
        }
        if (obj_player.direction = 315){
            if (!place_meeting(x + cd, y, obj_counter_1)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y + cd, obj_counter_1)){
                obj_player.direction = 270;
            }
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_box_3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// wall collision

//this code makes it so players cannot move through walls, but also
//allows them to slide along them.

//DONT TOUCH THE CODE IF YOU DONT KNOW HOW TO FIX IT
{
    //this variable CAN be changed, it referes to the collison distance
    //THIS MUST BE &gt;= PACE OR GAME CRASHES
    var cd = 5;
    
    //im checking each of the 4 diagonal directions, then checking for collisions
    //horizontally and vertically
    //if there is a collison vertically, horozontal movement is forced, and vice versa
    if (global.move == true){
        if (obj_player.direction = 45){
            if (!place_meeting(x + cd, y, obj_bed_3)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y - cd, obj_bed_3)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 135){
            if (!place_meeting(x - cd, y, obj_bed_3)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y - cd, obj_bed_3)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 225){
            if (!place_meeting(x - cd, y, obj_bed_3)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y + cd, obj_bed_3)){
                obj_player.direction = 270;
            }
        }
        if (obj_player.direction = 315){
            if (!place_meeting(x + cd, y, obj_bed_3)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y + cd, obj_bed_3)){
                obj_player.direction = 270;
            }
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_box_2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// wall collision

//this code makes it so players cannot move through walls, but also
//allows them to slide along them.

//DONT TOUCH THE CODE IF YOU DONT KNOW HOW TO FIX IT
{
    //this variable CAN be changed, it referes to the collison distance
    //THIS MUST BE &gt;= PACE OR GAME CRASHES
    var cd = 5;
    
    //im checking each of the 4 diagonal directions, then checking for collisions
    //horizontally and vertically
    //if there is a collison vertically, horozontal movement is forced, and vice versa
    if (global.move == true){
        if (obj_player.direction = 45){
            if (!place_meeting(x + cd, y, obj_bed_2)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y - cd, obj_bed_2)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 135){
            if (!place_meeting(x - cd, y, obj_bed_2)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y - cd, obj_bed_2)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 225){
            if (!place_meeting(x - cd, y, obj_bed_2)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y + cd, obj_bed_2)){
                obj_player.direction = 270;
            }
        }
        if (obj_player.direction = 315){
            if (!place_meeting(x + cd, y, obj_bed_2)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y + cd, obj_bed_2)){
                obj_player.direction = 270;
            }
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_box_1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// wall collision

//this code makes it so players cannot move through walls, but also
//allows them to slide along them.

//DONT TOUCH THE CODE IF YOU DONT KNOW HOW TO FIX IT
{
    //this variable CAN be changed, it referes to the collison distance
    //THIS MUST BE &gt;= PACE OR GAME CRASHES
    var cd = 5;
    
    //im checking each of the 4 diagonal directions, then checking for collisions
    //horizontally and vertically
    //if there is a collison vertically, horozontal movement is forced, and vice versa
    if (global.move == true){
        if (obj_player.direction = 45){
            if (!place_meeting(x + cd, y, obj_box_1)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y - cd, obj_box_1)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 135){
            if (!place_meeting(x - cd, y, obj_box_1)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y - cd, obj_box_1)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 225){
            if (!place_meeting(x - cd, y, obj_box_1)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y + cd, obj_box_1)){
                obj_player.direction = 270;
            }
        }
        if (obj_player.direction = 315){
            if (!place_meeting(x + cd, y, obj_box_1)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y + cd, obj_box_1)){
                obj_player.direction = 270;
            }
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_ball_3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// wall collision

//this code makes it so players cannot move through walls, but also
//allows them to slide along them.

//DONT TOUCH THE CODE IF YOU DONT KNOW HOW TO FIX IT
{
    //this variable CAN be changed, it referes to the collison distance
    //THIS MUST BE &gt;= PACE OR GAME CRASHES
    var cd = 5;
    
    //im checking each of the 4 diagonal directions, then checking for collisions
    //horizontally and vertically
    //if there is a collison vertically, horozontal movement is forced, and vice versa
    if (global.move == true){
        if (obj_player.direction = 45){
            if (!place_meeting(x + cd, y, obj_ball_3)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y - cd, obj_ball_3)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 135){
            if (!place_meeting(x - cd, y, obj_ball_3)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y - cd, obj_ball_3)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 225){
            if (!place_meeting(x - cd, y, obj_ball_3)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y + cd, obj_ball_3)){
                obj_player.direction = 270;
            }
        }
        if (obj_player.direction = 315){
            if (!place_meeting(x + cd, y, obj_ball_3)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y + cd, obj_ball_3)){
                obj_player.direction = 270;
            }
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_ball_2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// wall collision

//this code makes it so players cannot move through walls, but also
//allows them to slide along them.

//DONT TOUCH THE CODE IF YOU DONT KNOW HOW TO FIX IT
{
    //this variable CAN be changed, it referes to the collison distance
    //THIS MUST BE &gt;= PACE OR GAME CRASHES
    var cd = 5;
    
    //im checking each of the 4 diagonal directions, then checking for collisions
    //horizontally and vertically
    //if there is a collison vertically, horozontal movement is forced, and vice versa
    if (global.move == true){
        if (obj_player.direction = 45){
            if (!place_meeting(x + cd, y, obj_ball_2)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y - cd, obj_ball_2)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 135){
            if (!place_meeting(x - cd, y, obj_ball_2)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y - cd, obj_ball_2)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 225){
            if (!place_meeting(x - cd, y, obj_ball_2)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y + cd, obj_ball_2)){
                obj_player.direction = 270;
            }
        }
        if (obj_player.direction = 315){
            if (!place_meeting(x + cd, y, obj_ball_2)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y + cd, obj_ball_2)){
                obj_player.direction = 270;
            }
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_ball_1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// wall collision

//this code makes it so players cannot move through walls, but also
//allows them to slide along them.

//DONT TOUCH THE CODE IF YOU DONT KNOW HOW TO FIX IT
{
    //this variable CAN be changed, it referes to the collison distance
    //THIS MUST BE &gt;= PACE OR GAME CRASHES
    var cd = 5;
    
    //im checking each of the 4 diagonal directions, then checking for collisions
    //horizontally and vertically
    //if there is a collison vertically, horozontal movement is forced, and vice versa
    if (global.move == true){
        if (obj_player.direction = 45){
            if (!place_meeting(x + cd, y, obj_ball_1)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y - cd, obj_ball_1)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 135){
            if (!place_meeting(x - cd, y, obj_ball_1)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y - cd, obj_ball_1)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 225){
            if (!place_meeting(x - cd, y, obj_ball_1)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y + cd, obj_ball_1)){
                obj_player.direction = 270;
            }
        }
        if (obj_player.direction = 315){
            if (!place_meeting(x + cd, y, obj_ball_1)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y + cd, obj_ball_1)){
                obj_player.direction = 270;
            }
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bed_3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// wall collision

//this code makes it so players cannot move through walls, but also
//allows them to slide along them.

//DONT TOUCH THE CODE IF YOU DONT KNOW HOW TO FIX IT
{
    //this variable CAN be changed, it referes to the collison distance
    //THIS MUST BE &gt;= PACE OR GAME CRASHES
    var cd = 5;
    
    //im checking each of the 4 diagonal directions, then checking for collisions
    //horizontally and vertically
    //if there is a collison vertically, horozontal movement is forced, and vice versa
    if (global.move == true){
        if (obj_player.direction = 45){
            if (!place_meeting(x + cd, y, obj_bed_3)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y - cd, obj_bed_3)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 135){
            if (!place_meeting(x - cd, y, obj_bed_3)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y - cd, obj_bed_3)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 225){
            if (!place_meeting(x - cd, y, obj_bed_3)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y + cd, obj_bed_3)){
                obj_player.direction = 270;
            }
        }
        if (obj_player.direction = 315){
            if (!place_meeting(x + cd, y, obj_bed_3)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y + cd, obj_bed_3)){
                obj_player.direction = 270;
            }
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bed_2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// wall collision

//this code makes it so players cannot move through walls, but also
//allows them to slide along them.

//DONT TOUCH THE CODE IF YOU DONT KNOW HOW TO FIX IT
{
    //this variable CAN be changed, it referes to the collison distance
    //THIS MUST BE &gt;= PACE OR GAME CRASHES
    var cd = 5;
    
    //im checking each of the 4 diagonal directions, then checking for collisions
    //horizontally and vertically
    //if there is a collison vertically, horozontal movement is forced, and vice versa
    if (global.move == true){
        if (obj_player.direction = 45){
            if (!place_meeting(x + cd, y, obj_bed_2)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y - cd, obj_bed_2)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 135){
            if (!place_meeting(x - cd, y, obj_bed_2)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y - cd, obj_bed_2)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 225){
            if (!place_meeting(x - cd, y, obj_bed_2)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y + cd, obj_bed_2)){
                obj_player.direction = 270;
            }
        }
        if (obj_player.direction = 315){
            if (!place_meeting(x + cd, y, obj_bed_2)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y + cd, obj_bed_2)){
                obj_player.direction = 270;
            }
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_bed_1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// wall collision

//this code makes it so players cannot move through walls, but also
//allows them to slide along them.

//DONT TOUCH THE CODE IF YOU DONT KNOW HOW TO FIX IT
{
    //this variable CAN be changed, it referes to the collison distance
    //THIS MUST BE &gt;= PACE OR GAME CRASHES
    var cd = 5;
    
    //im checking each of the 4 diagonal directions, then checking for collisions
    //horizontally and vertically
    //if there is a collison vertically, horozontal movement is forced, and vice versa
    if (global.move == true){
        if (obj_player.direction = 45){
            if (!place_meeting(x + cd, y, obj_bed_1)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y - cd, obj_bed_1)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 135){
            if (!place_meeting(x - cd, y, obj_bed_1)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y - cd, obj_bed_1)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 225){
            if (!place_meeting(x - cd, y, obj_bed_1)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y + cd, obj_bed_1)){
                obj_player.direction = 270;
            }
        }
        if (obj_player.direction = 315){
            if (!place_meeting(x + cd, y, obj_bed_1)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y + cd, obj_bed_1)){
                obj_player.direction = 270;
            }
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// wall collision

//this code makes it so players cannot move through walls, but also
//allows them to slide along them.

//DONT TOUCH THE CODE IF YOU DONT KNOW HOW TO FIX IT
{
    //this variable CAN be changed, it referes to the collison distance
    //THIS MUST BE &gt;= PACE OR GAME CRASHES
    var cd = 5;
    
    //im checking each of the 4 diagonal directions, then checking for collisions
    //horizontally and vertically
    //if there is a collison vertically, horozontal movement is forced, and vice versa
    if (global.move == true){
        if (obj_player.direction = 45){
            if (!place_meeting(x + cd, y, obj_wall)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y - cd, obj_wall)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 135){
            if (!place_meeting(x - cd, y, obj_wall)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y - cd, obj_wall)){
                obj_player.direction = 90;
            }
        }
        if (obj_player.direction = 225){
            if (!place_meeting(x - cd, y, obj_wall)){
                obj_player.direction = 180;
            }
            else if (!place_meeting(x, y + cd, obj_wall)){
                obj_player.direction = 270;
            }
        }
        if (obj_player.direction = 315){
            if (!place_meeting(x + cd, y, obj_wall)){
                obj_player.direction = 0;
            }
            else if (!place_meeting(x, y + cd, obj_wall)){
                obj_player.direction = 270;
            }
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_glow_monster_level_2">
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>30</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>5</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///collision with glow monster

{
    if (global.invincible == false){
        global.life -= 20;
        global.invincible = true;
        global.move = false;
        obj_player.direction = point_direction(obj_player.x,obj_player.y,obj_glow_monster_level_2,obj_glow_monster_level_2.y) - 180;
        obj_player.speed = 15;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>213</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>-1</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_ouch</sound>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_ouch</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_glow_monster_level_1">
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>30</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>5</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///collision with glow monster

{
    if (global.invincible == false){
        global.life -= 20;
        global.invincible = true;
        global.move = false;
        obj_player.direction = point_direction(obj_player.x,obj_player.y,obj_glow_monster_level_1,obj_glow_monster_level_1.y) - 180;
        obj_player.speed = 15;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>213</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>-1</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_ouch</sound>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_ouch</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_glow_monster_tutorial">
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>30</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>5</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///collision with glow monster

{
    if (global.invincible == false){
        global.life -= 20;
        global.invincible = true;
        global.move = false;
        obj_player.direction = point_direction(obj_player.x,obj_player.y,obj_glow_monster_tutorial.x,obj_glow_monster_tutorial.y) - 180;
        obj_player.speed = 15;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>213</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>-1</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_ouch</sound>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_ouch</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_shadow_chase">
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>5</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>30</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///collision with shadow monster

{
    if (global.invincible == false){
        global.life -= .5;
        //global.move = false;
        //obj_player.direction = point_direction(obj_player.x,obj_player.y,obj_shadow_chase.x,obj_shadow_chase.y) - 180;
        //obj_player.speed = 15;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>213</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>-1</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_ouch</sound>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_ouch</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_shadow_tutorial">
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>5</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>30</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///collision with shadow monster

{
    if (global.invincible == false){
        global.life -= 20;
        global.invincible = true;
        global.move = false;
        obj_player.direction = point_direction(obj_player.x,obj_player.y,obj_shadow_tutorial.x,obj_shadow_tutorial.y) - 180;
        obj_player.speed = 15;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>213</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>-1</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_ouch</sound>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_ouch</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_stationary">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///collision with stationary monster

{
    if (global.invincible == false){
        global.life -= 20;
        global.invincible = true;
        global.move = false;
        obj_player.direction = point_direction(obj_player.x,obj_player.y,obj_stationary.x,obj_stationary.y) - 180;
        obj_player.speed = 15;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>30</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>5</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>213</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>-1</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_ouch</sound>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_ouch</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_enemy_bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///hit by enemy bullet

{
    global.life += -20;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>snd_ouch</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>obj_enemy_bullet</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw healthbar

{
    if (global.alive == true){
        draw_set_blend_mode(bm_normal);
        depth  = -10;
        script_execute(scr_draw_healthbar(8,8,72,24,global.life,c_gray,c_green,c_white));
        depth = 0;
        }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw ammmo bar

{
    if (!instance_exists(obj_ctr_shooting)&amp;&amp;global.alive == true){
        //this is the background for the ammo counter
        depth = -7;
        draw_set_colour(c_white);
        draw_rectangle(92,0,280,32,false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw battery meter

{
    if (global.alive == true){
        draw_set_blend_mode(bm_normal);
        depth = -10
        script_execute(scr_draw_batterylife(300,0,400,32,global.battery,c_red,c_yellow,c_gray));
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw self

{
    if (!instance_exists(obj_light_1)){
        if (obj_player.direction == 270 || obj_player.direction == 315 || obj_player.direction == 225){
            draw_sprite(spr_player_down,0,obj_player.x,obj_player.y);
        }
        else if (obj_player.direction == 45 || obj_player.direction == 90 || obj_player.direction == 135){
            draw_self();
        }
        else if (obj_player.direction == 0){
            draw_sprite(spr_player_right,0,obj_player.x,obj_player.y);
        }
        else {
            draw_sprite(spr_player_left,0,obj_player.x,obj_player.y);
        }
    }
    if (instance_exists(obj_light_1) &amp;&amp; instance_exists(obj_gun)){
        if (obj_player.direction == 270 || obj_player.direction == 315 || obj_player.direction == 225){
            draw_sprite(spr_player_down_flashlight,0,obj_player.x,obj_player.y);
        }
        else if (obj_player.direction == 45 || obj_player.direction == 90 || obj_player.direction == 135){
            draw_sprite(spr_player_up_flashlight,0,obj_player.x,obj_player.y);
        }
        else if (obj_player.direction == 0){
            draw_sprite(spr_player_right_flashlight,0,obj_player.x,obj_player.y);
        }
        else {
            draw_sprite(spr_player_left_flashlight,0,obj_player.x,obj_player.y);
        }
    }
    if (instance_exists(obj_light_1) &amp;&amp; !instance_exists(obj_gun)){
         if (obj_player.direction == 270 || obj_player.direction == 315 || obj_player.direction == 225){
            draw_sprite(spr_player_down_flashgun,0,obj_player.x,obj_player.y);
        }
        else if (obj_player.direction == 45 || obj_player.direction == 90 || obj_player.direction == 135){
            draw_sprite(spr_player_up_flashgun,0,obj_player.x,obj_player.y);
        }
        else if (obj_player.direction == 0){
            draw_sprite(spr_player_right_flashgun,0,obj_player.x,obj_player.y);
        }
        else{
            draw_sprite(spr_player_left_flashgun,0,obj_player.x,obj_player.y);
        }
    }
}

    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
