<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>300</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
    global.lightning = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>10</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// stop lightning

{
    global.lightning = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// do lightning

{
    if (random(3) &gt;= 2){
        global.lightning = true;
        alarm[2] = 25;
        audio_play_sound(snd_thunder,10,false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>150</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>15</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// keeping track of battery

{
    if (global.on){
        global.battery -= 1;
    }
    if (global.battery &lt;= 0){
        global.on = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Flashlight

///Light without flashlight


//im setting the target to global.light, making it black and 
//cutting out a bunch of circle (each slightly smaller than 
//the previous. The alpha is the same for each circle, being 
//semi transparent. the subractions stack on eachother 
//creating the illusion that the alpha is decreasing.
//I do teh same for a spite shaped like the flashlight beam
    
////DONT TOUCH THE CODE IF YOU DONT KNOW HOW TO FIX IT
var glowRad = 100;
{
    //var i is for the for loop later
    var i;
    //the first 2 if statements toggle the light on and off
    if (global.battery &gt; 0){
        if (keyboard_check_pressed(ord('F')) &amp;&amp; !global.on){
            global.on = true;
        }
        else if (keyboard_check_pressed(ord('F')) &amp;&amp; global.on){
            global.on = false;
        }
    }
    //this is the actual code
    if (global.alive &amp;&amp; !global.lightning){
        if (global.on){
            surface_set_target(global.light);
            draw_clear(c_black);
            draw_set_blend_mode(bm_subtract);
            draw_set_alpha(1/global.precision);
            for (i = 0; i &lt;= global.precision; i++){
                //light around player
                draw_circle(obj_player.x,obj_player.y,(global.radius-(global.radius/global.precision*i)),0);
                //flashlight beam
                draw_sprite_ext(spr_flashlight_beam,0,obj_player.x,obj_player.y,(1-(1/global.precision*i)),(1-(1/global.precision*i)),point_direction(obj_player.x,obj_player.y,mouse_x,mouse_y),c_white,1/global.precision);
                //light from glow monster
                if (global.glowMonster){
                    draw_circle(obj_glow_monster_tutorial.x,obj_glow_monster_tutorial.y,(glowRad-(glowRad/global.precision*i)),0);
                }
                //light from glow monster on lvel 1
                if (global.glowMonster1){
                    draw_circle(obj_glow_monster_level_1.x,obj_glow_monster_level_1.y,(glowRad-(glowRad/global.precision*i)),0);
                }
                //light from glow monster on level 2
                if (global.glowMonster2){
                    draw_circle(obj_glow_monster_level_2.x,obj_glow_monster_level_2.y,(glowRad-(glowRad/global.precision*i)),0);
                }
                //this is cutting out a hole for the health menu
                draw_rectangle(8 - 4,8 - 4,72 + 4,24 + 4,false);
                //this is cutting out a hole for the ammo counter
                draw_rectangle(92,0,280,32,false);
                //this is the background for the ammo counter
                draw_rectangle(92,0,280,32,false);
                //this is cutting out a hole for the mouse indicaator
                draw_circle(mouse_x,mouse_y,4,0)
                //this is cutting a hole ofr the battery incicaotr
                draw_rectangle(300,0,400,32,false);
            }
            //this block is necessary to reset the drawing tool
            //stuff gets wierd if you dont do this
            draw_set_alpha(1);
            draw_set_blend_mode(bm_normal);
            surface_reset_target();
            
            //the rest of the code is a failsafe, dont mess with it
            if (surface_exists(global.light)){
                //these two may need changing. depth determines what will
                //appear on top / below
                //the draw command will need to be changed if views used
                depth = -9;
                draw_surface(global.light,0,0);
            }
            else {
                global.light = surface_create(room_width, room_height);
            }
        }
        else if (!global.on){
            surface_set_target(global.light);
            draw_clear(c_black);
            draw_set_blend_mode(bm_subtract);
            draw_set_alpha(1/global.precision);
            for (i = 0; i &lt;= global.precision; i++){
                //this is the light around the player
                draw_circle(obj_player.x,obj_player.y,(global.radius-(global.radius/global.precision*i)),0);
                //this is cutting out a hole for the health menu
                draw_rectangle(8 - 4,8 - 4,72 + 4,24 + 4,false);
                //light from glow monster
                if (global.glowMonster){
                    draw_circle(obj_glow_monster_tutorial.x,obj_glow_monster_tutorial.y,(glowRad-(glowRad/global.precision*i)),0);
                }
                //light from glow monster on lvel 1
                if (global.glowMonster1){
                    draw_circle(obj_glow_monster_level_1.x,obj_glow_monster_level_1.y,(glowRad-(glowRad/global.precision*i)),0);
                }
                //light from glow monster on level 2
                if (global.glowMonster2){
                    draw_circle(obj_glow_monster_level_2.x,obj_glow_monster_level_2.y,(glowRad-(glowRad/global.precision*i)),0);
                }
                //this is cutting out a hole for the ammo counter
                draw_rectangle(92,0,280,32,false);
                //this is the background for the ammo counter
                draw_rectangle(92,0,280,32,false);
                //this is cutting out a hole for the mouse indicaator
                draw_circle(mouse_x,mouse_y,4,0)
                //this is cutting a hole ofr the battery incicaotr
                draw_rectangle(300,0,400,32,false);
            }
            //this is cutting out a hole for the health menu
            draw_rectangle(8,8,72,24,false);
            
            //light from glow monster
            //draw_circle(obj_glow_monster.x,obj_glow_monster.y,(global.radius-(global.radius/global.precision*i)),0);
            
            //this block is necessary to reset the drawing tool
            //stuff gets wierd if you dont do this
            draw_set_alpha(1);
            draw_set_blend_mode(bm_normal);
            surface_reset_target();
            
            //the rest of the code is a failsafe, dont mess with it
            if (surface_exists(global.light)){
                //these two may need changing. depth determines what will
                //appear on top / below
                //the draw command will need to be changed if views used
                depth = -9;
                draw_surface(global.light,0,0);
            }
            else {
                global.light = surface_create(room_width, room_height);
            }
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
