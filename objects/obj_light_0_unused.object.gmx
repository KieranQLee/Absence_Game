<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Light without flashlight


    //im setting the target to global.light, making it black and 
    //cutting out a bunch of circle (each slightly smaller than 
    //the previous. The alpha is the same for each circle, being 
    //semi transparent. the subractions stack on eachother 
    //creating the illusion that the alpha is decreasing
    
    ////DONT TOUCH THE CODE IF YOU DONT KNOW HOW TO FIX IT
{
    if (!global.on){
        surface_set_target(global.light);
        draw_clear(c_black);
        draw_set_blend_mode(bm_subtract);
        draw_set_alpha(1/global.precision);
        
        for (i = 0; i &lt;= global.precision; i++){
            draw_circle(obj_player.x,obj_player.y,(global.radius-(global.radius/global.precision*i)),0);
        }
       
        //this block is necessary to reset the drawing tools
        //stuff gets wierd if you dont do this
        draw_set_alpha(1);
        draw_set_blend_mode(bm_normal);
        surface_reset_target();
        
        //the rest if the code is a failsafe, dont mess with it
        if (surface_exists(global.light)){
            //these two may need changing. depth determines what will
            //appear on top / below
            //the draw command will need to be changed if views used
            depth = -9;
            draw_surface(global.light,0,0);
        }
        else {
            global.light = surface_create(room_width, room_height);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
